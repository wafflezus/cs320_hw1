//
// Created by Dad on 9/8/19.
//

#include "Executor.h"

#include <string>
#include <iostream>

static int valueInRange(int rand, int low, int high) {
    return ((rand % (high - low) + low) * 1);
}

const std::string Executor::EXECUTOR("[EXECUTOR]: ");

/*
This function takes in a random value generated by
rand() and returns a value between 50(inclusive) and 150(exclusive), which should be used as
number of iterations.
 */
int Executor::get_iteration_count(int rand) {
    return valueInRange(rand, 50, 150);
}

/*
This function takes in a random value generated by rand()
and returns a value between 100(inclusive) and 200(exclusive), which should be used as the
array size for the array in one iteration. This function should be called once for each iteration.
 */
int Executor::get_arr_size(int rand) {
    return valueInRange(rand, 100, 200);
}

/*
This function takes in a random value generated by rand()
and generates a value between 97 (inclusive) and 123 (exclusive), which is then explicitly
converted into a character and returned to the calling function. This assignment uses only lower
case characters.
 */
char Executor::get_arr_val(int rand) {
    return (char)valueInRange(rand, 97, 123);
}

/*
This function takes the populated array, itâ€™s size and the address to maxCount variable used in
get_running_ratio(). It then counts the number of vowels and consonants, and returns the
ratio of vowels/consonants. Also, it checks if the current value in address pointed by
maxCountPointer is lesser than count of vowels in the current array (it means that the maximum
number of vowels found in iterations so far is less than the current iteration). If yes, then it
places the value of count in the address pointed by maxCountPointer.
 */

float Executor::char_ratio(char *arr, int size, int *maxCountPointer) {
    //                               abcdefghijklmnopqrstuvwxyz
    static const char* letterType = "vcccvcccvcccccvcccccvccccc";

    int vowels = 0;
    int consonents = 0;
    for (int i = 0; i < size; i++) {
        char c = arr[i];
        int charNdx = c - 'a';
        char type = letterType[charNdx];
        if (type == 'c') {
            consonents++;
        } else {
            vowels++;
        }
    }
    if (*maxCountPointer < vowels) {
        *maxCountPointer = vowels;
    }
    return (float)vowels / (float)consonents;
}

double Executor::get_running_ratio() {
    int maxCount = 0;
    int maxIteration = 0;
    float ratioTotal = 0.0f;
    const int iterations = get_iteration_count(rand());
    std::cout << EXECUTOR << "Number of iterations is " << iterations << '\n';
    for (int i = 1; i <= iterations; i++) {
        int arrSize = get_arr_size(rand());
        char *array = new char[arrSize];
        for (int j = 0; j < arrSize; j++) {
            array[j] = get_arr_val(rand());
        }
        int oldMaxCount = maxCount;
        ratioTotal += char_ratio(array, arrSize, &maxCount);
        if (oldMaxCount < maxCount) {
            maxIteration = i;
        }
        delete [] array;
    }
    std::cout << EXECUTOR << "Iteration with maximum vowel count is " << maxIteration << std::endl;
    return (double)ratioTotal / (double)iterations;
}
